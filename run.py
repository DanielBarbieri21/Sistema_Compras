"""
Script de inicializa√ß√£o do Sistema de Compras v2.0
"""
import subprocess
import sys
import os
import logging
from pathlib import Path

try:
    from config import LOGS_DIR
    LOGS_DIR_PATH = Path(LOGS_DIR)
except Exception:
    LOGS_DIR_PATH = Path(__file__).parent / "logs"

# Configurar logging para arquivo (√∫til no execut√°vel windowed)
try:
    LOGS_DIR_PATH.mkdir(exist_ok=True)
    logging.basicConfig(
        filename=str(LOGS_DIR_PATH / "startup.log"),
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(message)s",
    )
except Exception:
    # Fallback para logging b√°sico no stdout
    logging.basicConfig(level=logging.INFO)

def install_requirements():
    """Instala as depend√™ncias necess√°rias"""
    try:
        print("Instalando depend√™ncias...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("Depend√™ncias instaladas com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"Erro ao instalar depend√™ncias: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("=" * 50)
    print("Sistema de Compras v2.0")
    print("=" * 50)
    logging.info("Inicializa√ß√£o do Sistema de Compras iniciada")
    
    # No execut√°vel (frozen), n√£o tentar instalar depend√™ncias
    is_frozen = getattr(sys, 'frozen', False)
    if not is_frozen:
        # Verificar se as depend√™ncias est√£o instaladas (modo desenvolvimento)
        try:
            import ttkbootstrap
            import openpyxl
            import reportlab
            import schedule
            print("‚úÖ Todas as depend√™ncias est√£o instaladas")
        except ImportError as e:
            print(f"‚ùå Depend√™ncia n√£o encontrada: {e}")
            print("Instalando depend√™ncias automaticamente...")
            
            if not install_requirements():
                print("‚ùå Falha ao instalar depend√™ncias. Instale manualmente:")
                print("pip install -r requirements.txt")
                return
    
    # Iniciar a aplica√ß√£o
    try:
        print("üöÄ Iniciando Sistema de Compras...")
        logging.info("Carregando main.main() e iniciando UI")
        from main import main as run_app
        run_app()
        logging.info("Aplica√ß√£o finalizada")
    except Exception as e:
        print(f"‚ùå Erro ao iniciar aplica√ß√£o: {e}")
        logging.exception("Erro ao iniciar aplica√ß√£o")
        import traceback
        traceback.print_exc()
        # Mostrar di√°logo de erro em modo windowed
        try:
            import tkinter as tk
            from tkinter import messagebox
            root = tk.Tk()
            root.withdraw()
            messagebox.showerror("Erro", f"Erro ao iniciar aplica√ß√£o:\n{e}")
        except Exception:
            pass

if __name__ == "__main__":
    main()

